// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Idea {
  id                String         @id @default(cuid())
  content           String         @default("")
  functionalities   Functionality[] // Pas besoin de `onDelete` ici
  order             Int            @default(0) // Champ pour gérer l'ordre d'affichage
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Functionality {
  id                String         @id @default(cuid())
  content           String
  ideaId            String
  idea              Idea           @relation(fields: [ideaId], references: [id], onDelete: Cascade) // Suppression en cascade ici
  functionalityItems FunctionalityItem[] // Pas besoin de `onDelete` ici
  order             Int            @default(0) // Champ pour gérer l'ordre d'affichage
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model FunctionalityItem {
  id              String         @id @default(cuid())
  item            String
  functionalityId String
  functionality   Functionality  @relation(fields: [functionalityId], references: [id], onDelete: Cascade) // Suppression en cascade ici
  order           Int            @default(0) // Champ pour gérer l'ordre d'affichage
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}
model User {
  id          String      @id @default(cuid())
  pseudo      String?     @db.VarChar(255)
  email       String      @unique @db.VarChar(255)
  password    String      @db.VarChar(255)
  role        Role        @default(USER)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  company     String
  trainings   Training[]
}

enum Role {
  USER
  MANAGER
  ADMIN
}

model Company {
  id              String           @id @default(cuid())
  name            String
  order             Int            @default(0) // Champ pour gérer l'ordre d'affichage
  employees       Employee[]
  companyCertifs  CompanyCertif[]
}

model Employee {
  id              String           @id @default(cuid())
  name            String
order             Int            @default(0) // Champ pour gérer l'ordre d'affichage
  email           String           @unique
  companyId       String
  company         Company          @relation(fields: [companyId], references: [id])
  progress        Progress[]
  employeeCertifs EmployeeCertif[]

  CompanyCertif CompanyCertif[]
}

model Training {
  id        String    @id @default(cuid())
  title     String
order             Int            @default(0) // Champ pour gérer l'ordre d'affichage
  modules   Module[]

  User User[]
}

model Module {
  id          String    @id @default(cuid())
  title       String
order             Int            @default(0) // Champ pour gérer l'ordre d'affichage
  chapters    Chapter[]
  trainingId  String
  training    Training  @relation(fields: [trainingId], references: [id])
}

model Chapter {
  id        String    @id @default(cuid())
  title     String
  moduleId  String
  module    Module    @relation(fields: [moduleId], references: [id])
order             Int            @default(0) // Champ pour gérer l'ordre d'affichage
  Progress Progress[]
}

model Progress {
  id          String    @id @default(cuid())
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  chapterId   String
  chapter     Chapter   @relation(fields: [chapterId], references: [id])
  completed   Boolean   @default(false)
}

model EmployeeCertif {
  id            String    @id @default(cuid())
  issuedDate    DateTime  @default(now())
  revisionDate  DateTime
  softExpirDate DateTime
  hardExpirDate DateTime
  badgeImg      String
  employeeId    String
  employee      Employee  @relation(fields: [employeeId], references: [id])
}

model CompanyCertif {
  id            String    @id @default(cuid())
  issuedDate    DateTime  @default(now())
  revisionDate  DateTime
  softExpirDate DateTime
  hardExpirDate DateTime
  badgeImg      String
  employeeId    String
  employee      Employee  @relation(fields: [employeeId], references: [id])
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
}

model Badge {
  id              String    @id @default(cuid())
  activBadge      String
  warningBadge    String
  deprecatedBadge String
}







